{"spans": [{"trace_id": "ElDygyDoB/icHsVmMYzfUA==", "span_id": "H4A+4IxvMCA=", "parent_span_id": null, "name": "Predict.forward", "start_time_unix_nano": 1761406597566084700, "end_time_unix_nano": 1761406597616405100, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-1250f28320e807f89c1ec566318cdf50\"", "mlflow.spanType": "\"LLM\"", "mlflow.spanInputs": "{\"text\": \"I'm absolutely thrilled with the results!\"}", "signature": "\"text -> sentiment\"", "mlflow.spanOutputs": "{\"sentiment\": 10}"}}, {"trace_id": "ElDygyDoB/icHsVmMYzfUA==", "span_id": "uY4jloiWs6U=", "parent_span_id": "H4A+4IxvMCA=", "name": "JSONAdapter.format_1", "start_time_unix_nano": 1761406597610708300, "end_time_unix_nano": 1761406597613666700, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-1250f28320e807f89c1ec566318cdf50\"", "mlflow.spanType": "\"PARSER\"", "mlflow.spanInputs": "{\"args\": [\"SentimentClassifier(text -> sentiment\\n    instructions='Classify the sentiment of a text.'\\n    text = Field(annotation=str required=True json_schema_extra={'desc': 'input text to classify sentiment', '__dspy_field_type': 'input', 'prefix': 'Text:'})\\n    sentiment = Field(annotation=int required=True json_schema_extra={'desc': 'sentiment, the higher the more positive', '__dspy_field_type': 'output', 'constraints': 'greater than or equal to: 0, less than or equal to: 10', 'prefix': 'Sentiment:'} metadata=[Ge(ge=0), Le(le=10)])\\n)\", [], {\"text\": \"I'm absolutely thrilled with the results!\"}]}", "mlflow.spanOutputs": "[{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `text` (str): input text to classify sentiment\\nYour output fields are:\\n1. `sentiment` (int): sentiment, the higher the more positive\\nConstraints: greater than or equal to: 0, less than or equal to: 10\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\nInputs will have the following structure:\\n\\n[[ ## text ## ]]\\n{text}\\n\\nOutputs will be a JSON object with the following fields.\\n\\n{\\n  \\\"sentiment\\\": \\\"{sentiment}        # note: the value you produce must be a single int value\\\"\\n}\\nIn adhering to this structure, your objective is: \\n        Classify the sentiment of a text.\"}, {\"role\": \"user\", \"content\": \"[[ ## text ## ]]\\nI'm absolutely thrilled with the results!\\n\\nRespond with a JSON object in the following order of fields: `sentiment` (must be formatted as a valid Python int).\"}]"}}, {"trace_id": "ElDygyDoB/icHsVmMYzfUA==", "span_id": "blbUsFlW0so=", "parent_span_id": "uY4jloiWs6U=", "name": "JSONAdapter.format_2", "start_time_unix_nano": 1761406597612965400, "end_time_unix_nano": 1761406597613556600, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-1250f28320e807f89c1ec566318cdf50\"", "mlflow.spanType": "\"PARSER\"", "mlflow.spanInputs": "{\"signature\": \"SentimentClassifier(text -> sentiment\\n    instructions='Classify the sentiment of a text.'\\n    text = Field(annotation=str required=True json_schema_extra={'desc': 'input text to classify sentiment', '__dspy_field_type': 'input', 'prefix': 'Text:'})\\n    sentiment = Field(annotation=int required=True json_schema_extra={'desc': 'sentiment, the higher the more positive', '__dspy_field_type': 'output', 'constraints': 'greater than or equal to: 0, less than or equal to: 10', 'prefix': 'Sentiment:'} metadata=[Ge(ge=0), Le(le=10)])\\n)\", \"demos\": [], \"inputs\": {\"text\": \"I'm absolutely thrilled with the results!\"}}", "mlflow.spanOutputs": "[{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `text` (str): input text to classify sentiment\\nYour output fields are:\\n1. `sentiment` (int): sentiment, the higher the more positive\\nConstraints: greater than or equal to: 0, less than or equal to: 10\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\nInputs will have the following structure:\\n\\n[[ ## text ## ]]\\n{text}\\n\\nOutputs will be a JSON object with the following fields.\\n\\n{\\n  \\\"sentiment\\\": \\\"{sentiment}        # note: the value you produce must be a single int value\\\"\\n}\\nIn adhering to this structure, your objective is: \\n        Classify the sentiment of a text.\"}, {\"role\": \"user\", \"content\": \"[[ ## text ## ]]\\nI'm absolutely thrilled with the results!\\n\\nRespond with a JSON object in the following order of fields: `sentiment` (must be formatted as a valid Python int).\"}]"}}, {"trace_id": "ElDygyDoB/icHsVmMYzfUA==", "span_id": "5U64Hy9wtQc=", "parent_span_id": "H4A+4IxvMCA=", "name": "LM.__call__", "start_time_unix_nano": 1761406597613883200, "end_time_unix_nano": 1761406597615708000, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-1250f28320e807f89c1ec566318cdf50\"", "mlflow.spanType": "\"CHAT_MODEL\"", "mlflow.spanInputs": "{\"messages\": [{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `text` (str): input text to classify sentiment\\nYour output fields are:\\n1. `sentiment` (int): sentiment, the higher the more positive\\nConstraints: greater than or equal to: 0, less than or equal to: 10\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\nInputs will have the following structure:\\n\\n[[ ## text ## ]]\\n{text}\\n\\nOutputs will be a JSON object with the following fields.\\n\\n{\\n  \\\"sentiment\\\": \\\"{sentiment}        # note: the value you produce must be a single int value\\\"\\n}\\nIn adhering to this structure, your objective is: \\n        Classify the sentiment of a text.\"}, {\"role\": \"user\", \"content\": \"[[ ## text ## ]]\\nI'm absolutely thrilled with the results!\\n\\nRespond with a JSON object in the following order of fields: `sentiment` (must be formatted as a valid Python int).\"}], \"prompt\": null, \"response_format\": \"<class 'dspy.adapters.json_adapter.DSPyProgramOutputs'>\"}", "temperature": "0.0", "max_tokens": "4000", "model": "\"openai/gpt-4o-mini\"", "model_type": "\"chat\"", "cache": "true", "mlflow.message.format": "\"dspy\"", "mlflow.spanOutputs": "[\"{\\\"sentiment\\\":10}\"]"}}, {"trace_id": "ElDygyDoB/icHsVmMYzfUA==", "span_id": "bsca51lNm1I=", "parent_span_id": "H4A+4IxvMCA=", "name": "JSONAdapter.parse", "start_time_unix_nano": 1761406597615991600, "end_time_unix_nano": 1761406597616260800, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-1250f28320e807f89c1ec566318cdf50\"", "mlflow.spanType": "\"PARSER\"", "mlflow.spanInputs": "{\"signature\": \"SentimentClassifier(text -> sentiment\\n    instructions='Classify the sentiment of a text.'\\n    text = Field(annotation=str required=True json_schema_extra={'desc': 'input text to classify sentiment', '__dspy_field_type': 'input', 'prefix': 'Text:'})\\n    sentiment = Field(annotation=int required=True json_schema_extra={'desc': 'sentiment, the higher the more positive', '__dspy_field_type': 'output', 'constraints': 'greater than or equal to: 0, less than or equal to: 10', 'prefix': 'Sentiment:'} metadata=[Ge(ge=0), Le(le=10)])\\n)\", \"completion\": \"{\\\"sentiment\\\":10}\"}", "mlflow.spanOutputs": "{\"sentiment\": 10}"}}]}