{"spans": [{"trace_id": "x/JHW3s5f7tPs0jc94c1oQ==", "span_id": "fMIeNXoUyJE=", "parent_span_id": null, "name": "Predict.forward", "start_time_unix_nano": 1761407045198281500, "end_time_unix_nano": 1761407045237146900, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-c7f2475b7b397fbb4fb348dcf78735a1\"", "mlflow.spanType": "\"LLM\"", "mlflow.spanInputs": "{\"text\": \"This makes me so angry and frustrated.\"}", "signature": "\"text -> sentiment\"", "mlflow.spanOutputs": "{\"sentiment\": 1}"}}, {"trace_id": "x/JHW3s5f7tPs0jc94c1oQ==", "span_id": "6qshC95lKFA=", "parent_span_id": "fMIeNXoUyJE=", "name": "ChatAdapter.format", "start_time_unix_nano": 1761407045233270400, "end_time_unix_nano": 1761407045233817000, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-c7f2475b7b397fbb4fb348dcf78735a1\"", "mlflow.spanType": "\"PARSER\"", "mlflow.spanInputs": "{\"signature\": \"SentimentClassifier(text -> sentiment\\n    instructions='Classify the sentiment of a text.'\\n    text = Field(annotation=str required=True json_schema_extra={'desc': 'input text to classify sentiment', '__dspy_field_type': 'input', 'prefix': 'Text:'})\\n    sentiment = Field(annotation=int required=True json_schema_extra={'desc': 'sentiment, the higher the more positive', '__dspy_field_type': 'output', 'constraints': 'greater than or equal to: 0, less than or equal to: 10', 'prefix': 'Sentiment:'} metadata=[Ge(ge=0), Le(le=10)])\\n)\", \"demos\": [], \"inputs\": {\"text\": \"This makes me so angry and frustrated.\"}}", "mlflow.spanOutputs": "[{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `text` (str): input text to classify sentiment\\nYour output fields are:\\n1. `sentiment` (int): sentiment, the higher the more positive\\nConstraints: greater than or equal to: 0, less than or equal to: 10\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\n[[ ## text ## ]]\\n{text}\\n\\n[[ ## sentiment ## ]]\\n{sentiment}        # note: the value you produce must be a single int value\\n\\n[[ ## completed ## ]]\\nIn adhering to this structure, your objective is: \\n        Classify the sentiment of a text.\"}, {\"role\": \"user\", \"content\": \"[[ ## text ## ]]\\nThis makes me so angry and frustrated.\\n\\nRespond with the corresponding output fields, starting with the field `[[ ## sentiment ## ]]` (must be formatted as a valid Python int), and then ending with the marker for `[[ ## completed ## ]]`.\"}]"}}, {"trace_id": "x/JHW3s5f7tPs0jc94c1oQ==", "span_id": "D8JGZU2Vlns=", "parent_span_id": "fMIeNXoUyJE=", "name": "LM.__call__", "start_time_unix_nano": 1761407045234188500, "end_time_unix_nano": 1761407045235662200, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-c7f2475b7b397fbb4fb348dcf78735a1\"", "mlflow.spanType": "\"CHAT_MODEL\"", "mlflow.spanInputs": "{\"messages\": [{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `text` (str): input text to classify sentiment\\nYour output fields are:\\n1. `sentiment` (int): sentiment, the higher the more positive\\nConstraints: greater than or equal to: 0, less than or equal to: 10\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\n[[ ## text ## ]]\\n{text}\\n\\n[[ ## sentiment ## ]]\\n{sentiment}        # note: the value you produce must be a single int value\\n\\n[[ ## completed ## ]]\\nIn adhering to this structure, your objective is: \\n        Classify the sentiment of a text.\"}, {\"role\": \"user\", \"content\": \"[[ ## text ## ]]\\nThis makes me so angry and frustrated.\\n\\nRespond with the corresponding output fields, starting with the field `[[ ## sentiment ## ]]` (must be formatted as a valid Python int), and then ending with the marker for `[[ ## completed ## ]]`.\"}], \"prompt\": null}", "temperature": "0.0", "max_tokens": "4000", "model": "\"openai/gpt-4o-mini\"", "model_type": "\"chat\"", "cache": "true", "mlflow.message.format": "\"dspy\"", "mlflow.spanOutputs": "[\"[[ ## sentiment ## ]]\\n1\\n\\n[[ ## completed ## ]]\"]"}}, {"trace_id": "x/JHW3s5f7tPs0jc94c1oQ==", "span_id": "nxRp34fBViU=", "parent_span_id": "fMIeNXoUyJE=", "name": "ChatAdapter.parse", "start_time_unix_nano": 1761407045236493700, "end_time_unix_nano": 1761407045236907600, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-c7f2475b7b397fbb4fb348dcf78735a1\"", "mlflow.spanType": "\"PARSER\"", "mlflow.spanInputs": "{\"signature\": \"SentimentClassifier(text -> sentiment\\n    instructions='Classify the sentiment of a text.'\\n    text = Field(annotation=str required=True json_schema_extra={'desc': 'input text to classify sentiment', '__dspy_field_type': 'input', 'prefix': 'Text:'})\\n    sentiment = Field(annotation=int required=True json_schema_extra={'desc': 'sentiment, the higher the more positive', '__dspy_field_type': 'output', 'constraints': 'greater than or equal to: 0, less than or equal to: 10', 'prefix': 'Sentiment:'} metadata=[Ge(ge=0), Le(le=10)])\\n)\", \"completion\": \"[[ ## sentiment ## ]]\\n1\\n\\n[[ ## completed ## ]]\"}", "mlflow.spanOutputs": "{\"sentiment\": 1}"}}]}