{"spans": [{"trace_id": "m6gYZ3Bv1My/Rf0rd6NrZg==", "span_id": "knJ77wHG3Hc=", "parent_span_id": null, "name": "Predict.forward", "start_time_unix_nano": 1761407804230393000, "end_time_unix_nano": 1761407804276370700, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-9ba81867706fd4ccbf45fd2b77a36b66\"", "mlflow.spanType": "\"LLM\"", "mlflow.spanInputs": "{\"text\": \"This makes me so angry and frustrated.\"}", "signature": "\"text -> sentiment\"", "mlflow.spanOutputs": "{\"sentiment\": 2}"}}, {"trace_id": "m6gYZ3Bv1My/Rf0rd6NrZg==", "span_id": "BAW4GJC9T0o=", "parent_span_id": "knJ77wHG3Hc=", "name": "JSONAdapter.format_1", "start_time_unix_nano": 1761407804267263800, "end_time_unix_nano": 1761407804272130700, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-9ba81867706fd4ccbf45fd2b77a36b66\"", "mlflow.spanType": "\"PARSER\"", "mlflow.spanInputs": "{\"args\": [\"SentimentClassifier(text -> sentiment\\n    instructions='Classify the sentiment of a text.'\\n    text = Field(annotation=str required=True json_schema_extra={'desc': 'input text to classify sentiment', '__dspy_field_type': 'input', 'prefix': 'Text:'})\\n    sentiment = Field(annotation=int required=True json_schema_extra={'desc': 'sentiment, the higher the more positive', '__dspy_field_type': 'output', 'constraints': 'greater than or equal to: 0, less than or equal to: 10', 'prefix': 'Sentiment:'} metadata=[Ge(ge=0), Le(le=10)])\\n)\", [], {\"text\": \"This makes me so angry and frustrated.\"}]}", "mlflow.spanOutputs": "[{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `text` (str): input text to classify sentiment\\nYour output fields are:\\n1. `sentiment` (int): sentiment, the higher the more positive\\nConstraints: greater than or equal to: 0, less than or equal to: 10\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\nInputs will have the following structure:\\n\\n[[ ## text ## ]]\\n{text}\\n\\nOutputs will be a JSON object with the following fields.\\n\\n{\\n  \\\"sentiment\\\": \\\"{sentiment}        # note: the value you produce must be a single int value\\\"\\n}\\nIn adhering to this structure, your objective is: \\n        Classify the sentiment of a text.\"}, {\"role\": \"user\", \"content\": \"[[ ## text ## ]]\\nThis makes me so angry and frustrated.\\n\\nRespond with a JSON object in the following order of fields: `sentiment` (must be formatted as a valid Python int).\"}]"}}, {"trace_id": "m6gYZ3Bv1My/Rf0rd6NrZg==", "span_id": "9Hoij6tf9KE=", "parent_span_id": "BAW4GJC9T0o=", "name": "JSONAdapter.format_2", "start_time_unix_nano": 1761407804271221800, "end_time_unix_nano": 1761407804271913100, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-9ba81867706fd4ccbf45fd2b77a36b66\"", "mlflow.spanType": "\"PARSER\"", "mlflow.spanInputs": "{\"signature\": \"SentimentClassifier(text -> sentiment\\n    instructions='Classify the sentiment of a text.'\\n    text = Field(annotation=str required=True json_schema_extra={'desc': 'input text to classify sentiment', '__dspy_field_type': 'input', 'prefix': 'Text:'})\\n    sentiment = Field(annotation=int required=True json_schema_extra={'desc': 'sentiment, the higher the more positive', '__dspy_field_type': 'output', 'constraints': 'greater than or equal to: 0, less than or equal to: 10', 'prefix': 'Sentiment:'} metadata=[Ge(ge=0), Le(le=10)])\\n)\", \"demos\": [], \"inputs\": {\"text\": \"This makes me so angry and frustrated.\"}}", "mlflow.spanOutputs": "[{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `text` (str): input text to classify sentiment\\nYour output fields are:\\n1. `sentiment` (int): sentiment, the higher the more positive\\nConstraints: greater than or equal to: 0, less than or equal to: 10\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\nInputs will have the following structure:\\n\\n[[ ## text ## ]]\\n{text}\\n\\nOutputs will be a JSON object with the following fields.\\n\\n{\\n  \\\"sentiment\\\": \\\"{sentiment}        # note: the value you produce must be a single int value\\\"\\n}\\nIn adhering to this structure, your objective is: \\n        Classify the sentiment of a text.\"}, {\"role\": \"user\", \"content\": \"[[ ## text ## ]]\\nThis makes me so angry and frustrated.\\n\\nRespond with a JSON object in the following order of fields: `sentiment` (must be formatted as a valid Python int).\"}]"}}, {"trace_id": "m6gYZ3Bv1My/Rf0rd6NrZg==", "span_id": "baI4kWbac3E=", "parent_span_id": "knJ77wHG3Hc=", "name": "LM.__call__", "start_time_unix_nano": 1761407804272375900, "end_time_unix_nano": 1761407804275416400, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-9ba81867706fd4ccbf45fd2b77a36b66\"", "mlflow.spanType": "\"CHAT_MODEL\"", "mlflow.spanInputs": "{\"messages\": [{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `text` (str): input text to classify sentiment\\nYour output fields are:\\n1. `sentiment` (int): sentiment, the higher the more positive\\nConstraints: greater than or equal to: 0, less than or equal to: 10\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\nInputs will have the following structure:\\n\\n[[ ## text ## ]]\\n{text}\\n\\nOutputs will be a JSON object with the following fields.\\n\\n{\\n  \\\"sentiment\\\": \\\"{sentiment}        # note: the value you produce must be a single int value\\\"\\n}\\nIn adhering to this structure, your objective is: \\n        Classify the sentiment of a text.\"}, {\"role\": \"user\", \"content\": \"[[ ## text ## ]]\\nThis makes me so angry and frustrated.\\n\\nRespond with a JSON object in the following order of fields: `sentiment` (must be formatted as a valid Python int).\"}], \"prompt\": null, \"response_format\": \"<class 'dspy.adapters.json_adapter.DSPyProgramOutputs'>\"}", "temperature": "0.0", "max_tokens": "4000", "model": "\"openai/gpt-4o-mini\"", "model_type": "\"chat\"", "cache": "true", "mlflow.message.format": "\"dspy\"", "mlflow.spanOutputs": "[\"{\\\"sentiment\\\":2}\"]"}}, {"trace_id": "m6gYZ3Bv1My/Rf0rd6NrZg==", "span_id": "DXU4zNmA8ug=", "parent_span_id": "knJ77wHG3Hc=", "name": "JSONAdapter.parse", "start_time_unix_nano": 1761407804275836800, "end_time_unix_nano": 1761407804276207000, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-9ba81867706fd4ccbf45fd2b77a36b66\"", "mlflow.spanType": "\"PARSER\"", "mlflow.spanInputs": "{\"signature\": \"SentimentClassifier(text -> sentiment\\n    instructions='Classify the sentiment of a text.'\\n    text = Field(annotation=str required=True json_schema_extra={'desc': 'input text to classify sentiment', '__dspy_field_type': 'input', 'prefix': 'Text:'})\\n    sentiment = Field(annotation=int required=True json_schema_extra={'desc': 'sentiment, the higher the more positive', '__dspy_field_type': 'output', 'constraints': 'greater than or equal to: 0, less than or equal to: 10', 'prefix': 'Sentiment:'} metadata=[Ge(ge=0), Le(le=10)])\\n)\", \"completion\": \"{\\\"sentiment\\\":2}\"}", "mlflow.spanOutputs": "{\"sentiment\": 2}"}}]}